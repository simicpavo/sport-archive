services:
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    env_file:
      - .env.prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env.prod
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: ["sh", "-c", "npx prisma migrate deploy && npm start"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - API_URL=${VPS_HOST}:3000
    restart: unless-stopped
    ports:
      - "4000:4000"
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    env_file:
      - .env.prod
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app-network
    volumes:
      - ./pgadmin-servers.json:/pgadmin4/servers.json

volumes:
  postgres_data_prod:

networks:
  app-network:
    driver: bridge
