name: Deploy to VPS

on:
  push:
    branches: [main, feat/27-deploy-to-vps]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          # Copy files to VPS
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /opt/sport-archive"
          rsync -avz --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'backend/dist' \
            --exclude 'frontend/dist' \
            --exclude '.env*' \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/sport-archive/

          # Deploy application
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /opt/sport-archive
            
            # Create .env.prod from secrets
            cat > .env.prod << 'ENVEOF'
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}
            PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
            PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
            NODE_ENV=production
            PORT=3000
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            LOG_LEVEL=info
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            VPS_HOST=${{ secrets.VPS_HOST }}
            ENVEOF
            
            # Deploy with Docker Compose
            docker-compose -f docker.compose.prod.yml down
            docker-compose -f docker.compose.prod.yml up -d --build
            
            echo "Deployment completed!"
          EOF

      - name: Verify deployment
        run: |
          echo "Waiting for services to start..."
          sleep 30

          # Simple health check
          if curl -f http://${{ secrets.VPS_HOST }}:3000/health; then
            echo "✅ Backend is running"
          else
            echo "❌ Backend health check failed"
          fi

          if curl -f http://${{ secrets.VPS_HOST }}:4000; then
            echo "✅ Frontend is running"
          else
            echo "❌ Frontend health check failed"
          fi

