generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id          String   @id @default(cuid())
  first_name  String
  last_name   String
  nickname    String?
  birth_date  DateTime
  nationality String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  records Record[]
}

model Club {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sport    Sport    @relation(fields: [sport_id], references: [id])
  sport_id String
  records  Record[]
}

model Sport {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  clubs         Club[]
  nationalTeams NationalTeam[]
  records       Record[]
  competitions  Competition[]
}

model NationalTeam {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sport    Sport    @relation(fields: [sport_id], references: [id])
  sport_id String
  records  Record[]
}

model Competition {
  id         String    @id @default(cuid())
  name       String
  season     String?
  start_date DateTime?
  end_date   DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  sport    Sport    @relation(fields: [sport_id], references: [id])
  sport_id String
  records  Record[]
}

model ContentType {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  records Record[]
}

model Record {
  id              String    @id @default(cuid())
  title           String
  description     String
  date            DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  popularityScore Float?    @default(0)

  sport            Sport         @relation(fields: [sport_id], references: [id])
  sport_id         String
  content_type     ContentType   @relation(fields: [content_type_id], references: [id])
  content_type_id  String
  competition      Competition?  @relation(fields: [competition_id], references: [id])
  competition_id   String?
  national_team    NationalTeam? @relation(fields: [national_team_id], references: [id])
  national_team_id String?
  persons          Person[]
  clubs            Club[]
}

model MediaSource {
  id        String   @id @default(cuid())
  baseUrl   String
  urlPath   String?
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts MediaNews[]
}

model MediaNews {
  id         String   @id @default(cuid())
  title      String
  content    String
  urlPath    String
  externalId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  MediaSource   MediaSource? @relation(fields: [mediaSourceId], references: [id])
  mediaSourceId String?

  likeCount        Int @default(0)
  shareCount       Int @default(0)
  commentCount     Int @default(0)
  totalEngagements Int @default(0)

  @@unique([externalId, mediaSourceId])
}
