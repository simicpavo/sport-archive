generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  nickname    String?
  birthDate   DateTime
  nationality String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  records Record[]
}

model Club {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sport   Sport    @relation(fields: [sportId], references: [id])
  sportId String
  records Record[]
}

model Sport {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubs         Club[]
  nationalTeams NationalTeam[]
  records       Record[]
  competitions  Competition[]
}

model NationalTeam {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sport   Sport    @relation(fields: [sportId], references: [id])
  sportId String
  records Record[]
}

model Competition {
  id        String    @id @default(cuid())
  name      String
  season    String?
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  sport   Sport    @relation(fields: [sportId], references: [id])
  sportId String
  records Record[]
}

model ContentType {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  records Record[]
}

model Record {
  id              String    @id @default(cuid())
  title           String
  description     String
  date            DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  popularityScore Float?    @default(0)

  sport          Sport         @relation(fields: [sportId], references: [id])
  sportId        String
  contentType    ContentType   @relation(fields: [contentTypeId], references: [id])
  contentTypeId  String
  competition    Competition?  @relation(fields: [competitionId], references: [id])
  competitionId  String?
  nationalTeam   NationalTeam? @relation(fields: [nationalTeamId], references: [id])
  nationalTeamId String?
  persons        Person[]
  clubs          Club[]
}

model MediaSource {
  id        String   @id @default(cuid())
  baseUrl   String
  urlPath   String?
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts MediaNews[]
}

model MediaNews {
  id         String   @id @default(cuid())
  title      String
  content    String
  urlPath    String
  externalId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  MediaSource   MediaSource? @relation(fields: [mediaSourceId], references: [id])
  mediaSourceId String?

  likeCount        Int @default(0)
  shareCount       Int @default(0)
  commentCount     Int @default(0)
  totalEngagements Int @default(0)

  @@unique([externalId, mediaSourceId])
}
